#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('infoblood:server');
var http = require('http');
var MysqlJson = require('mysql-json');

global.conexion = new MysqlJson({
    host:'localhost',
    user:'root',
    password:'',
    database:'SistemaCreatinina'
  });
  global.conexion.connect(function(err) {
  if (err) throw err;
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

global.server = http.createServer(app);
var numberUsers=0;
/**
 * Listen on provided port, on all network interfaces.
 */

 var prueba={
    id:1,
    text: "Hola soy Alex",
    author: "Desarrollando en node"
 };

//global.server.listen(port);
global.server.listen(3000, function() {
  console.log('Servidor corriendo en http://localhost:3000');
});
var io = require('socket.io')(global.server);
io.on('connection', function(socket) {
   var query="SELECT * FROM Usuario";
  global.conexion.query(query, function (err, result, fields) {
    io.sockets.emit('messages', result);
  });
  numberUsers++;
  console.log('Un cliente se ha conectado: '+numberUsers);
  socket.on('disconnect', function() {
        // Decrease the socket count on a disconnect, emit
        numberUsers--;
        console.log("Cliente desconectado: "+numberUsers);
    })
  socket.on('new-message', function(data) {
 // messages.push(data);

  io.sockets.emit('messages', prueba);
});
    //socket.emit('messages', messages);
});
global.server.on('error', onError);
global.server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
